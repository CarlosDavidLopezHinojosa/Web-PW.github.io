<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Apuntes para PW]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib/media/favicon.png</url><title>Apuntes para PW</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 25 Nov 2024 23:29:31 GMT</lastBuildDate><atom:link href="lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 25 Nov 2024 23:29:26 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[2. Fundamentos de Internet]]></title><description><![CDATA[ 
 <br>En esta sección nos meteremos en las entrañas de la Web y como funcionan los protocolos, direccionamiento y el lenguaje de la Web.<br><br>Internet es un conjunto de redes físicas heterogéneas, interconectadas mediante protocolo TCP/IP.<br><img alt="Pasted image 20241120161323.png" src="includes/pasted-image-20241120161323.png"><br><br>
<br>Es un protocolo muy sencillo de envio de datos entre 2 máquinas
<br>Cada dispositivo tiene una dirección de 32 bits separada en 4 bloque de 8 bits  en IPV4.
<br><img alt="Pasted image 20241120161850.png" src="includes/pasted-image-20241120161850.png"><br>
<br>IETF (Internet Engineering Task Force) e IANA (Internet Assigned Numbers Authority) tienen reservadas direcciones IP para fines concretos.
<br><br><br>TCP garantiza la entrega de los mensajes sobre IP, en contraposición a UDP (User Datagram Protocol)<br>TCP/IP utiliza multiplexado múltiples aplicaciones utilizando la misma dirección IP <br>
<br>Se asigna un número de puerto a cada programa o servicio, que en general es accedido mediante socket de red.
<br>Puertos:<br>
Del  a  () se denominan puestos del sistema.<br>
<br>21: FTP (file transfer protocol).
<br>22: SSH (secure shell).
<br>23: Telnet.
<br>25: email.
<br>53: DNS (domain name server).
<br>80: HTTP (hypertext transfer protocol).
<br>443: HTTP sobre TLS/SSL (HTTPS).
<br>990: FTPS (FTP sobre TLS/SSL).
<br>992: Telnet sobre TLS/SSL.
<br>De  a   son puertos reservados a demanda de las entidades.<br>
<br>1433: MS SQL Server 
<br>1521: Oracle listener 
<br>3306: MySQL 
<br>3690: Subversion 
<br>5400,5500,5600,5700,5800,5900: VNC (escritorio remoto sobre HTTP) 
<br>8000: iRDMI (Intel Remote Desktop Management Interface) 

<br>Utilizado erróneamente como puerto HTTP, lo que supone un riesgo de amenaza


<br>8080: HTTP alternativo
<br><a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers" target="_blank">Más puertos</a><br>
<a data-tooltip-position="top" aria-label="http://es.adminsub.net/tcp-udp-port-finder" rel="noopener nofollow" class="external-link" href="http://es.adminsub.net/tcp-udp-port-finder" target="_blank">Buscador de Puertos, ¡Ayuda a encontrar amenzas!</a><br><br>
<br>Implementación de la transparencia de nombrado ofrecida por sistemas distribuidos.
<br>Conjunto de servidores que mapean nombres a direcciones IP.
<br><img alt="Pasted image 20241120170509.png" src="includes/pasted-image-20241120170509.png"><br><a data-tooltip-position="top" aria-label="https://whois.domaintools.com/" rel="noopener nofollow" class="external-link" href="https://whois.domaintools.com/" target="_blank">Para ver la correspondencia de Ip nombre y viceversa (WhoIs)</a><br>Dentro nuestro propio sistema modificando el fichero etc/host/ podemos redireccionar los nombre de dominio a una determinada dirección Ip.<br>
<br>Sistemas Windows: C:\Windows\System32\drivers\etc\hosts 
<br>Sistemas MacOS: /private/etc/hosts 
<br>Sistemas Unix/Linux: /etc/hosts 
<br>Sistemas Android: /system/etc/hosts
<br>Hay que tener cuidado al modficar estos ficheros ya que alguien que pueda acceder a nuestro sistema (malicioso), modificar este fichero y redirigir un nombre de dominio que suponemos seguro a uno que ha creado para robar tus datos personales pishing.<br>Gráfica de crecimiento de uso de DNS:<br><img alt="Pasted image 20241120171425.png" src="includes/pasted-image-20241120171425.png"><br><br>
<br>Cadena de caracteres que sirve como localizador, nombre, o ambos 
<br>Identificación no ambigua de un recurso concreto, definiendo un espacio de nombres separados de forma jerárquica 
<br>RFC 3986 <a data-tooltip-position="top" aria-label="https://tools.ietf.org/html/rfc3986" rel="noopener nofollow" class="external-link" href="https://tools.ietf.org/html/rfc3986" target="_blank">Generic Syntax</a> 
<br>Utilizada para definir el acceso único y no ambiguo de cualquier recurso: 

<br>direcciones de páginas web, datos o ítems de la web semántica, servicios y APIs, etc.


<br>Ejemplos:<br>ftp://ftp.is.co.za/rfc/rfc1808.txt 

ldap://[2001:db8::7]/c=GB?objectClass?one 

mailto:John.Doe@anexample.com 

telnet://192.0.2.16:80/ 

http://www.jrromero.net
<br>El esquema se especifica como cadena de caracteres no vacía y minúscula (http, https, ftp, telnet, mailto, etc.), al fin y al cabo se trata del protocolo a usar.<br><img alt="Pasted image 20241120172725.png" src="includes/pasted-image-20241120172725.png"><br>Componente de autoridad compuesto por: <br>
<br>usuario + “:” + password
<br>Host: nombre de servidor o dirección IP en notación decimal con puntos 
<br>Número de puerto
<br>Ruta (path): separada por segmentos “/”. Puede ser vacía y debe corresponderse con la ruta del sistema de ficheros (no necesariamente 1:1).<br>Un componente de consulta (query) con una cadena de consulta sobre datos no jerárquicos. No está estandarizado su formato, si bien es habitual la secuencia<br>
de tipo “?clave1=valor1&amp;clave2=valor2”<br>
<br>Utilizado en el caso de paso de parámetros por método GET. 
<br>Los caracteres están reservados como delimitadores: : / ? # [ ] @
<br>Un componente fragmento, que contiene un identificador de un recurso secundario, como anclas (anchors) en secciones de HTML.<br><img alt="Pasted image 20241120174119.png" src="includes/pasted-image-20241120174119.png"><br><br>
<br>El protocolo determina el resto de la estructura 
<br>El dominio del servidor es mapeado por el DNS a su dirección IP 
<br>Al ser protocolo HTTP, el puerto por defecto (según ICANN) es 80 
<br>La ruta finaliza en un directorio, por lo que el recurso invocado por defecto es determinado en la parte de servidor (index.php, index.jsp, index.html, …)
<br><br>
<br>
Establece el conjunto de comandos interpretados por el servidor web 

<br>
Creado inicialmente por Tim Bernes-Lee en el CERN (1989) 

<br>
Actualmente, coordinado y desarrollado por IETF y el W3C (World Wide Web Consortium) 

<br>
La versión más reciente – HTTP/3 – se liberó en Junio de 2022 

<br>RFC 9114 <a data-tooltip-position="top" aria-label="https://www.rfc-editor.org/rfc/rfc9114" rel="noopener nofollow" class="external-link" href="https://www.rfc-editor.org/rfc/rfc9114" target="_blank">"Hypertext Transfer Protocol Version 3 (HTTP/3)"</a>


<br>
La mayoría de los navegadores ya lo soportaban desde hace algún tiempo 

<br>
Trabaja sobre TLS (Transport Layer Security) 1.3 o superior + UDP 

<br>RFC 7301 <a data-tooltip-position="top" aria-label="https://tools.ietf.org/html/rfc7301" rel="noopener nofollow" class="external-link" href="https://tools.ietf.org/html/rfc7301" target="_blank">“Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension”</a>


<br><br>Peticiones de Seguras (sólo lectura) – no alteran el estado del servidor:<br>
<br>GET: Devuelve el recurso identificado por el Request-URI.
<br>OPTIONS: Retorna las opciones de comunicación disponibles por el servidor (server capabilities).
<br>HEAD: Inspecciona la cabecera del recurso (no devuelve el BODY).
<br>Peticiones Idempotentes una solicitud idéntica puede realizarse múltiples veces, devolviendo siempre el mismo resultado:<br>
<br>PUT:  Solicita al servidor guardar el cuerpo de la solicitud en la ubicación dada por la URL
<br>DELETE:  Solicita al servidor que elimine el recurso en la URL dada.
<br><img alt="Pasted image 20241120181443.png" src="includes/pasted-image-20241120181443.png"><br>Peticiones No Idempotentes realizar múltiples peticiones idénticas podría causar efectos adicionales (p.ej. enviar varias veces una orden):<br>
<br>POST: Envío de información al servidor (p.ej. información de un formulario).
<br>PACHT: Solicita un conjunto de cambios (parciales) descritos en la entidad identificada por la Request-URI
<br><img alt="Pasted image 20241120181517.png" src="includes/pasted-image-20241120181517.png"><br>Otras peticiones: <br>
<br>CONNECT:  Utilizado por cliente para establecer una conexión sin cierre con el servidor 
<br>TRACE: Realiza una prueba de eco de retorno (muy utilizado para depuración, medición de latencias y desarrollo)
<br><br>Peticiones Cacheables:<br>
<br>
GET:

<br>Propósito: Recuperar información sin modificar el estado del servidor.
<br>Es la petición más comúnmente cacheable, ya que su naturaleza es idempotente (repetirla produce el mismo resultado).
<br>Ejemplo: Solicitar imágenes, archivos CSS, o recursos de API.


<br>
HEAD:

<br>Similar a GET, pero solo recupera los encabezados sin el cuerpo de la respuesta.
<br>Cacheable bajo las mismas condiciones que GET.


<br><img alt="Pasted image 20241120181624.png" src="includes/pasted-image-20241120181624.png"><br>Peticiones No Cacheables:<br>
<br>
POST:

<br>Propósito: Enviar datos al servidor para que se procesen.
<br>Por diseño, las respuestas a estas peticiones no son cacheables porque podrían cambiar el estado del servidor y no son idempotentes.


<br>
PUT, DELETE, PATCH:

<br>Estas peticiones modifican o eliminan datos en el servidor.
<br>No son cacheables porque afectan directamente el estado del recurso.


<br><a data-tooltip-position="top" aria-label="https://developer.mozilla.org/es/docs/Web/HTTP/Caching" rel="noopener nofollow" class="external-link" href="https://developer.mozilla.org/es/docs/Web/HTTP/Caching" target="_blank">Más información de los métodos HTTP</a><br><br>Los códigos de estado son identificadores y metainformación asociados a la respuesta (Response) HTTP recibida por el servidor.<br>Tipos de códigos: <br>
<br>1xx : Códigos informativos 
<br>2xx : Códigos de éxito 
<br>3xx : Códigos de redirección 
<br>4xx : Códigos de error en cliente 
<br>5xx : Códigos de error en servidor
<br><img alt="Pasted image 20241120182139.png" src="includes/pasted-image-20241120182139.png"><br><br>Forma estándar de indicar la naturaleza y formato de un recurso<br>Los tipos de medios se dividen en categorías: <br>
<br>application, audio, font, example, image, message, model, multipart, text, video.
<br><a data-tooltip-position="top" aria-label="https://www.iana.org/assignments/media-types/media-types.xhtml" rel="noopener nofollow" class="external-link" href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank">El listado completo de tipos en IANA</a>
<br><img alt="Pasted image 20241120182429.png" src="includes/pasted-image-20241120182429.png">]]></description><link>2.-fundamentos-de-internet.html</link><guid isPermaLink="false">2. Fundamentos de Internet.md</guid><pubDate>Wed, 20 Nov 2024 17:24:40 GMT</pubDate><enclosure url="includes/pasted-image-20241120161323.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;includes/pasted-image-20241120161323.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3. Tipología de la Web]]></title><description><![CDATA[ 
 <br>En esta sección de la asignatura vamos a ver la estructura general de la web así como el navegador y los diferentes tipos de localizaciones.<br><br>En general sigue la estructura cliente-servidor (C/S)<br>
<br>El navegador web hace de cliente que envia requests.
<br>El servidor web hace de servidor que responde las request con responses.
<br>No olvidemos el componente de la red.
<br><img alt="Pasted image 20241121082915.png" src="includes/pasted-image-20241121082915.png"><br><br>El navegador Web como Cliente:<br>
<br>
El navegador web es el encargado de interpretar el lenguaje del lado del cliente, normalmente recibido en HTTP Response, y de renderizar la salida.

<br>
El usuario generará eventos que se resolveran con código del cliente (Validación de credenciales) o generando peticiones HTTP al servidor.

<br>
El cliente más habitual es el navegador.

<br>El navegador web como Herramienta de Desarrollo:<br>
<br>Los navegadores actuales sirven como suites de desarrollo avanzadas, que es recomendable dominar.
<br>Inspección de código, depuración, medición de carga y tiempos, uso de memoria, edición, etc.
<br><img alt="Pasted image 20241121083801.png" src="includes/pasted-image-20241121083801.png"><br>Para inspeccionar una página web puedes pulsar ctrl + shift + I.<br><br>En primer lugar se nos presentan dos formas de representar la web, similares pero con sus diferencias:<br>SItio Web VS Portal Web:<br>
<br>
Sitio Web: Su objetivo es capturar gran cantidad de tráfico y ser visto, por que representa facilidad para el usuario.

<br>
Portal Web: Su objetivo es limitar el tráfico al grupo adecuado de usuarios, a los que se les proporcionan servicios.

<br><br>Toda solicitud igual al servidor (HTTP Request) devuelve el mismo contenido implementado (hard coded) para ese mismo recurso, no distingue entre usuario siempre dará la misma respuesta HTTP, un ejemplo muy simple y burdo es que cuando se inicie sesión en un página web todos los usuarios tendrán la misma vista.<br><img alt="Pasted image 20241121090221.png" src="includes/pasted-image-20241121090221.png"><br>Ventajas: <br>
<br>Muy útil si el número de páginas es pequeño y no hay necesidad de personalizar el contenido a cada usuario.

<br>La respuesta va acompañada de un código 200 OK si todo va bien o 400 Not Found en caso de no existir dicho recurso.
<br>Solo necesita un servidor web que procese peticiones GET.


<br>Incovenientes:<br>
<br>Muy ineficiente si se prevé un crecimiento en el número de variaciones de respuestas (p.ej. incremento de productos en un catálogo, ya que cada producto individual implica una página).

<br>Debe vigilarse el esfuerzo de mantenimiento.


<br><br>La respuesta devuelta por el servidor (HTTP Response) se genera para cada petición en base a los datos específicos del HTTP Request.<br>Por ejemplo, si el catálogo está almacenado, la solicitud identificará el ID del producto, que se buscará en la base de datos (no son páginas individuales pre-creadas) y se construirá dinámicamente la respuesta al cliente insertando los datos en una plantilla de HTML. <br>
<br>Una plantilla (HTML template) puede generar miles de páginas 
<br>Fácilmente extensible, modificable 
<br>Fácil de implementar servicios de búsqueda 
<br>Necesita la instalación de un servidor de aplicaciones para construir las páginas a partir de las plantillas
<br><img alt="Pasted image 20241121091227.png" src="includes/pasted-image-20241121091227.png"><br>Los servidores de aplicaciones reciben una solicitud GET/POST y construyen dinámicamente el recurso que sirve de respuesta HTTP.<br>
<br>
No sólo generan HTML, también pueden generar otros tipos de medios, como texto, ficheros PDF, CSV, JSON, XML, etc. 

<br>
Permiten gestionar la redundancia de datos 

<br>
Ofrecen características adicionales: alta disponibilidad, balanceo de carga, gestión de usuarios y permisos de acceso, seguridad, gestión centralizada, gestión de caché, etc. 

<br>
Constituyen un modelo de capa de servicio, por lo que ayudan a los desarrolladores web a focalizarse en la lógica de negocio 

<br>Se desarrolla en lenguajes tipo Java (J2EE), .NET, PHP, etc.


<br><a data-tooltip-position="top" aria-label="https://en.wikipedia.org/wiki/List_of_application_servers" rel="noopener nofollow" class="external-link" href="https://en.wikipedia.org/wiki/List_of_application_servers" target="_blank">Variedad de servidores de aplicaciones – según lenguaje:</a> <br>
<br>En el lado de cliente, javascript es el lenguaje más utilizado.
<br>En el lado de servidor, Java (J2EE – Java 2 Enterprise Edition) es el lenguaje más utilizado en sitios empresariales.
<br>Es importante conocer no sólo las características del lenguaje (incluyendo posibles frameworks de desarrollo), sino también las del servidor de aplicaciones.
<br><br>Comparativa de el uso de servidores web en del último año:<br><img alt="Pasted image 20241121090540.png" src="includes/pasted-image-20241121090540.png"><br><br>Una aplicación web es un programa que es accesible utilizando cualquier navegador web (p.ej. Google Docs, Google Analytics, Adobe Color CC, etc.).<br>En general, en la aplicación web el usuario final interactúa con acciones: <br>
<br>
No es exclusivo con respecto a Sitio web, ya que un sitio puede proveer determinados servicios a sus usuarios en localizaciones concretas del mismo (la aplicación web puede ser parte de un sitio web) 

<br>
En la aplicación web, gran parte del trabajo se realiza en el cliente a diferencia del sitio web que la mayoría se realiza en el servidor.

<br>
En las aplicaciones web, la transferencia C/S es mayoritariamente de datos a diferencia del sitio web que se transfieren páginas renderizadas (datos + interfaz usuario).

<br>Las aplicaciones web suelen ofrecer una experiencia de usuario más ágil y rápida 
<br>Los sitios web están mejor posicionados para SEO (Search Engine Optim.)


<br><img alt="Pasted image 20241121101131.png" src="includes/pasted-image-20241121101131.png"><br><br>
<br>
Especificidad: Una aplicación web va destinada a un conjunto concreto de usuarios finales, lo que marcará su diseño e interacción.

<br>
Interactividad: Dada la gran cantidad de datos que manipulan, debe ofrecerse una experiencia de usuario ágil y eficaz para el objetivo del usuario.

<br>
Integración: La aplicación será un componente dentro de un sistema mayor, intercomunicándose con el resto de elementos (p.ej. Google Docs en Google Suite).

<br>
Autenticación: El usuario que realiza la acciones sobre los datos debe obtener los permisos para acceder a la información.

<br>
Complejidad: Las tareas que desarrollan las aplicaciones web van más allá que la interacción, tratándose de acciones complejas focalizadas en un dominio de aplicación (especificidad).

<br>
Precompilación: La aplicación web debe compilarse antes de su despliegue, frente al uso de plantillas de los sitios web dinámicos.

<br>
Despliegue: Los cambios pueden afectar a todo el proyecto: mayor esfuerzo de prueba (test) y mantenimiento.

<br><br>Una SPA es un tipo de aplicación web de cliente grueso, que no requiere recarga de la página durante su uso (p.ej. Gmail), y aprovecha tecnologías AJAX y de micro-servicios.<br><img alt="Pasted image 20241121102053.png" src="includes/pasted-image-20241121102053.png"><br>Ventajas:<br>
<br>Carga Rápida.
<br>Desarrollo más simple y fácil de depurar.
<br>Permite transformar a una aplicación móvil.
<br>Puede guardar datos en caché de forma efectiva.
<br>Inconvenientes: <br>
<br>En caso de optimización SEO, es preferible la renderización en el lado del servidor – mayor dificultad de desarrollo.
<br>SPA es menos seguro (p.ej. cross-site scripting, XSS).
<br>Puede presentar problemas en la pila de memoria en Javascript, que ralentice la aplicación.
<br><img alt="Pasted image 20241121102318.png" src="includes/pasted-image-20241121102318.png"><br><br>Un servicio web es un punto de acceso a una función software máquina-máquina y que es referenciable mediante URL. <br>Un servicio web tiene una interfaz, encargada de esconder los detalles de implementación (hardware, software, dependencias, lenguajes de programación, etc.) y definir el formato de datos y el acceso a los mismos.<br>
<br>Un servicio web es débilmente acoplado.
<br>Un servicio web es un componente.
<br>Un servicio web es independiente de la implementación.
<br>Los servicios pueden ser utilizados junto con otros servicios, proveyendo múltiples interfaces que constituyen una API, y permiten llevar a cabo transacciones complejas.<br>La esencia de los servicios web es la Reutilización.<br>
<br>Aligera las aplicaciones web – desarrollo, mantenimiento, etc. 
<br>Los servicios pueden ser de desarrollo propio o de terceros y se vinculan dinámicamente en ejecución, lo que facilita su disponibilidad y reemplazo.
<br>Los servicios web permiten el pago por uso y limitación de acceso.
<br><br>Servicios SOAP (Single-Object Access Protocol):<br>Funcionan sobre HTTP y otros protocolos (FTP, TCP, colas, etc.).<br>
<br>
Estructuran sus mensajes en XML, con E/S fuertemente tipadas a los tipos básicos (¿limitante?).

<br>
Ventaja: toda la firma está bien definida: namespace, métodos (signatura completa), tipos y limitaciones, metadatos, etc. en formato WSDL (Web Service Definition Language).

<br>
Desventaja: No es adecuado en aplicaciones que requieran un alto desempeño.

<br>Servicios REST (Representational State Transfer): <br>Funcionan únicamente sobre HTTP con métodos GET, POST, PUT, DELETE (operaciones CRUD) <br>
<br>
Ofrece una semántica mejor definida, con operaciones ligadas a los Endpoint o Estructura flexible de los mensajes, no fuertemente tipados, lo que permite comunicar múltiples formatos y tipos de medios 

<br>
Ventajas: Servicios más livianos e interpretado de forma natural en lenguajes como Javascript → Adoptado en Cloud.

<br>
Desventaja: Posibles errores en el caso de implementaciones con lenguajes fuertemente tipados (Java, C#) 

<br>
REST utiliza los métodos HTTP de forma explícita, ofreciendo servicios sin estado.

<br>
Permite exponer las URIs como una estructura de directorios, siendo la base de una API/REST.

<br>
Transfieren los datos de la respuesta en formato XML, JSON (JavaScript Object Notation), o ambos.

<br><img alt="Pasted image 20241121110050.png" src="includes/pasted-image-20241121110050.png">]]></description><link>3.-tipología-de-la-web.html</link><guid isPermaLink="false">3. Tipología de la Web.md</guid><pubDate>Thu, 21 Nov 2024 10:00:54 GMT</pubDate><enclosure url="includes/pasted-image-20241121082915.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;includes/pasted-image-20241121082915.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[4. Marcos Tecnológicos]]></title><description><![CDATA[ 
 <br>En esta sección de la asignatura hablaremos de las terminología de la web, el stack que se suele usar y la disposición de algunos frameworks.<br><br>En desarrollo web, el término “pila de tecnología” (tech stack) se refiere al conjunto de herramientas, lenguajes y software que se emplea durante las fases de desarrollo y despliegue de un producto web o aplicación móvil.<br>En general la pila esta compuesta por la combinación de tecnologías que se usan en el lado del servidor (Back-End) y en el lado del cliente (Front-End).<br><img alt="Pasted image 20241123172129.png" src="includes/pasted-image-20241123172129.png"><br><br>Back-End:<br>
<br>Contiene la lógica de negocio de la aplicación.
<br>Nunca es accedido por el usuario directamente, sino a través del frontend.
<br>Se desarrolla con lenguajes de programación como (Java, Ruby, PHP, ... ).
<br>Front-End:<br>
<br>Es la parte visual de la aplicación, interactúa con el usuario final.
<br>Se usan lenguajes de marcado como HTML, CSS y lenguajes de programación como Javascript.
<br><img alt="Pasted image 20241123174058.png" src="includes/pasted-image-20241123174058.png"><br><br>
<br>LAMP: Linux – Apache – MySQL – PHP
<br>ASP.NET: ASP.NET, IIS, Angular/TypeScript, SQL Server, MS Azure 
<br>MEAN: MongoDB, Express.js, Angular.js, Node.js 
<br>MERN: Idem con React para front (MEVN -&gt; vue.js) 
<br>Java Stack: Java, Spring, Wildfly, Linux, NGINX  
<br>JAM: Javascript + APIs + Markup (También Serverless stack)
<br><br><br>Un framework es un software abstracto, que ofrece funciones genéricas para ser utilizadas o adaptadas por el código del desarrollador y facilitar así el desarrollo de aplicaciones específicas.<br>
<br>
Para considerarse framework, debe ser independiente del dominio de aplicación, universal y ofrecer un entorno reutilizable.

<br>
Puede ofrecer soporte adicional, como herramientas, APIs, librerías de código, etc.
Características distintivas: 

<br>
Inversión de control: el flujo del sistema lo controla el framework (vs. APIs) 

<br>
Extensibilidad: El desarrollador podrá extender su funcionalidad 

<br>
Estabilidad: El código del framework es transparente al desarrollo, que no preverá cambios en el código que afecten a su aplicación 

<br>
Retrocompatibilidad: Debe garantizar la compatibilidad de la aplicación conforme evoluciona.

<br><br>Un web framework (WF) es un framework software diseñado para el desarrollo de aplicaciones web a través de invocaciones a servicios web, APIs u otro tipo de recursos.<br>El objetivo principal del WF es el de automatizar partes del desarrollo web (p.ej. patrón MVC) y otras actividades comunes (p.ej. acceso a base de datos) que de otra forma deberían ser implementadas una y otra vez.<br>
<br>
Facilitan la reutilización de código 

<br>
Generalmente se utilizan para el desarrollo de sitios web dinámicos.

<br>
Los WF se diferencian según el lado en que se despliegan: WF de back-end y WF de front-end.

<br><img alt="Pasted image 20241123180711.png" src="includes/pasted-image-20241123180711.png"><br><br>Sistema basado en plantillas (templates):<br>
Mecanismos para la generación automática de documentos web a partir de un lenguaje de marcas – favoreciendo reutilización de código.<br>Gestión de caché:<br>
Almacenamiento temporal de documentos, así como su actualización y gestión, con el fin de reducir el ancho de banda y los accesos al servidor de aplicaciones (mejorando la latencia).<br>Acceso a base de datos y gestión de objetos de datos:<br>
Acceso a un amplio número de bases de datos sin implicar modificación en el código fuente de la aplicación, así como la creación de objetos de mapeo y correspondencia con el esquema de la base de datos (mediante objetos de clases o formatos tipos JSON o XML).<br>Funciones de seguridad:<br>
Funciones de autenticación y autorización, así como listas de control de acceso a las funciones de la aplicación.<br>Enrutado:<br>
Mecanismos para la interpretación, mapeo y redirección de URLs (friendly URL).<br>Programación asíncrona:<br>
Encapsulan la dificultad de las técnicas de desarrollo de comunicación asíncrona con el servidor (AJAX – Asynchronous JavaScript and XML).<br>Generación de código:<br>
Tanto a nivel de patrones arquitecturales (MVC) –incluyendo acceso a base de datos– como a nivel de plantillas.<br>Servicios web:<br>
Encapsulación de creación y suministro de WS. <br>Integración: Mecanismos de integración con otros frameworks o herramientas (p.ej. con frameworks de pruebas tipo JUnit).<br><br>Desempeño del WF:<br>
Tiempo de ejecución y carga del sitio. En general, este factor puede compensarse de otras formas en el despliegue (máquinas, balanceadores, proxy inverso u otro hardware o software base).<br>Escalabilidad:<br>
Tanto escalabilidad vertical (cambiar a un hardware más potente) como escalabilidad horizontal (ampliar el número de servidores web y bases de datos) y/o geográfica (redistribuir los usuarios según su localización más cercana a un servidor).<br>Soporte de caché:<br>
Permite soportar un mayor número de peticiones optimizando el documento (o parte del mismo) que se guarda la primera vez que se solicita para no ser generado de nuevo.<br>Seguridad web:<br>
Resistencia frente a ataques y frecuencia de actualizaciones del WF al respecto.<br><img alt="Pasted image 20241123182242.png" src="includes/pasted-image-20241123182242.png"><br>Algunos WF populares son:<br>
<br>React
<br>Angular
<br>BackJone.js
<br>Vue.js
<br><br>Término referido a un WF minimalista, esto es, aquel que ofrece un subconjunto mínimo de funcionalidades necesario para el desarrollo de un proyecto web.<br>En general, un micro-WF ofrece las siguientes características mínimas: <br>
<br>Control y gestión de solicitudes y respuestas HTTP 
<br>Integración con APIs (ej. aplicaciones basadas en servicios) 
<br>Pero no suele ofrecer las siguientes (salvo posibles extensiones): <br>
<br>Seguridad. Gestión de cuentas, autenticación y autorización 
<br>Validación de entradas 
<br>Motor de plantillas (templates) 
<br>Mapeo de objetos de acceso a datos
]]></description><link>4.-marcos-tecnológicos.html</link><guid isPermaLink="false">4. Marcos Tecnológicos.md</guid><pubDate>Mon, 25 Nov 2024 19:11:36 GMT</pubDate><enclosure url="includes/pasted-image-20241123172129.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;includes/pasted-image-20241123172129.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[5. Lenguajes para la Web]]></title><description><![CDATA[ 
 <br>En esta sección hablaremos de los lenguajes de marcado como son el HTML, CSS y javascript, además de otros como también XML.<br><br><br>Es un formato sencillo y flexible utilizado fundamentalmente para el intercambio de datos en Web.<br><img alt="Pasted image 20241125201248.png" src="includes/pasted-image-20241125201248.png"><br>
<br>Derivado de SGML (Standard Generalize MarkUp Language), que sin embargo resultó muy complejo para su interpretación y procesamiento por clientes web y aplicaciones.
<br>Fijó las bases de los lenguajes de marcado, basado en etiquetas.
<br>Especificación Declarativa, describiendo estructura y otros ámbitos del documento.
<br>Es muy riguroso, por apertura y cerrado de etiquetas.
<br>Es estándar libre y abierto de la W3C.
<br>Es la base del desarrollo de API's.
<br><img alt="Pasted image 20241125201847.png" src="includes/pasted-image-20241125201847.png"><br>message es el elemento raiz.<br>La estructura de un documento XML puede ser definido en un DTD (Document Type Definition) heredado de SGML, ya en desuso, actualmente se usa XSD.<br>
<br>Ofrece un amplio sistema de tipos.
<br>Permite definir restricciones sobre la estructura de los documentos.
<br>XSD esta basado en XML (favorece su procesamiento).
<br>Ventajas:<br>
<br>Formato abierto y estándar.
<br>Puede representar casi cualquier tipo de dato.
<br>Fácil de leer por la máquina y por humanos.
<br>Multitud de herramientas para su procesamiento.
<br>Inconvenientes:<br>
<br>Genera ficheros muy voluminosos que pueden empeorar el rendimiento.
<br>Algunos datos pueden ser difíciles de encajar en un formato XML válido.
<br>El código JS para navegar el árbol de etiquetas es muy voluminoso y tedioso.
<br><br>Es el lenguaje de marcado basado en texto más utilizado en el lado de cliente, que sirve para desarrollar la estructura de una página web permitiendo:<br>
<br>Publicar cabeceras, texto, tablas, imágenes, listados, etc...
<br>Acceso a documentos en linea a través de hipervínculos.
<br>Heredado de XML (XHTML) hasta  la extinción de HTML4.
<br><img alt="Pasted image 20241125205932.png" src="includes/pasted-image-20241125205932.png"><br><br>
<br>
HTML se desarrolló en CERN, pasando posteriormente a la IETF durante los 5 primeros años (1990 – 1995).

<br>
Con la creación del W3C, adoptó HTML3 en 1995, avanzando hasta un modelo más pragmático – HTML 3.2 – en 1998.

<br>
La W3C vio la necesidad de evolucionar HTML hacia un lenguaje más estructurado basado en XML, obteniendo HTML4.

<br>
Surge XHTML 1.0 (HTML4) en 2000.

<br>
Sucesivas evoluciones de XML+HTML derivan en XHTML DOM Level 1 (1998), DOM Level 2 (2000-2003) y DOM Level 3 (2004).

<br>
XForms surge en 2003, para el desarrollo de formularios sin necesidad de recodificar los motores de renderizado de los navegadores.

<br>
El desarrollo de XML permite la especificación de nuevos formatos como RSS (después, Atom).

<br>
En el W3C Workshop 2004 se establecen las bases de HTML5, al que se unen Opera, Apple y Mozilla (que forman WHATWG) – su desarrollo se inició junto con W3C en 2007.

<br>
Aparece la recomendación de HTML5 en 2012 por la W3C, incluyendo información semántica en los documentos.

<br>
Aparece la especificación HTML de WHATWG (estado: Living Standard) en 2016.

<br>
En mayo de 2019, WHATWG y W3C firman un acuerdo para llevar una única especificación de HTML y DOM.

<br><br>Creado en [1995]Es el lenguaje de hoja de estilos utilizado para la presentación del diseño gráfico de un documento escrito en el lenguaje HTML:<br>
<br>Describe la estructura del diseño (layout), colores, fuentes y reglas de presentación.
<br>Permite describir diferentes presentaciones para distintos dispositivos.
<br>Múltiples documentos web pueden compartir el mismo diseño.
<br><img alt="Pasted image 20241125205918.png" src="includes/pasted-image-20241125205918.png"><br>Métodos de aplicación:<br> En línea, utilizando el atributo style de HTML.<br>&lt;body style="background-color: #FF0000;"&gt;
<br>Interno, incrustando CSS como contenido de la etiqueta.<br>&lt;style type="text/css"&gt;
body {background-color: #FF0000;}
&lt;/style&gt;
<br>Externo, vinculando el documento HTML a un fichero de estilos externo con extensión .css.<br>&lt;link rel="stylesheet" type="text/css" href="style/style.css" /&gt;
<br>CSS cubre tres aspectos diferentes de estilo y maquetación: <br>
<br>Estilo del texto, incluyendo fuentes, colores de fuente, tipos de ítems de las enumeraciones, etc. 
<br>Estilo de las cajas, considerando que todos los elementos de HTML son considerados como cajas con las siguientes propiedades:
<br><img alt="Pasted image 20241125205603.png" src="includes/pasted-image-20241125205603.png"><br>Permite modificar el estilo y tamaño del contenido, relleno, borde, margen y caja<br>
<br>Distribución de las cajas, permitiendo modificar su posición absoluta y relativa de una respecto a otras.
<br><br> CSS define reglas que se aplican a un documento, y modifican el modo en que este es presentado.<br>Cada regla CSS se compone de: <br>
<br>
Conjunto de propiedades: valores establecidos para la presentación del documento HTML o Cada par propiedad-valor recibe el nombre de declaración.

<br>
Selector: “Seleccionador” de los elementos HTML afectados por el nuevo valor de la propiedad.

<br><img alt="Pasted image 20241125205812.png" src="includes/pasted-image-20241125205812.png"><br><br>Es el lenguaje de programación del lado de cliente predominante.<br>Javascript permite desarrollar páginas web interactivas/reactivas (sitios dinámicos) en los que hay que integrar algún tipo de programación (ej. para validación de datos).<br>
<br>Código escrito como scripts separados del contenido/estructura y diseño del documento web. 
<br>Código puede ser incrustado en marcas HTML o vinculado desde un fichero separado del documento, que debe ser accesible al cliente.
<br>El código se ejecuta en el cliente (navegador web) o en un entorno externo en el dispositivo del usuario.
<br><img alt="Pasted image 20241126001750.png" src="includes/pasted-image-20241126001750.png"><br>Originalmente desarrollado (nombre del proyecto: Mocha) y liberado por Netscape en septiembre de [1995] bajo el nombre de LiveScript.<br>Javascript es un lenguaje multiparadigma, basado en prototipos y dinámico.<br>
<br>
Multiparadigma: Permite programación funcional (con funciones de primera clase), orientada a objetos e imperativa. 

<br>
Funciones de primera clase: Paradigma en el que las funciones son los elementos de primer nivel, permitiendo pasar funciones como argumentos de otras, funciones como valores de retorno y asignar funciones a variables.

<br>
Basado en prototipos (programación classless): Los objetos no se instancian, sino que se clonan (a partir de prototipos) o son programados explícitamente por el programador.

<br>&lt;script src=“miscript.js"&gt;&lt;/script&gt;
<br>var genericAnimal = Object.create(null); 
genericAnimal.name = 'Animal’; 
genericAnimal.gender = 'female’; 
genericAnimal.description = function() { return 'Gender: ' + this.gender + ';                                                     Name: ' + this.name;}; 

var cat = Object.create(genericAnimal); 
cat.purr = function() { return 'Purrrr!'; };

var colonel = Object.create(cat); 
colonel.name = 'Colonel Meow’;

var puff = Object.create(cat); 
puff.name = 'Puffy';
<br><br>DOM es una interfaz independiente del lenguaje y de la plataforma, que permite el acceso y actualización dinámica al contenido, estructura y estilo de los documentos a los lenguajes de script.<br>En Javascript, DOM es una API para documentos HTML y XML, que proporciona una representación estructural del documento <br>Permite manipular, crear, eliminar y cambiar el código de los elementos escritos en HTML y CSS aplicando valores dinámicos.<br>En DOM, los elementos de HTML son objetos:  <br>
<br>Tiene las propiedades de todos los elementos HTML. 
<br>Tiene métodos para acceder a todos los elementos 
<br>Recoge los eventos para todos los elementos HTML.
<br><img alt="Pasted image 20241126000026.png" src="includes/pasted-image-20241126000026.png"><br>El árbol DOM tiene 4 tipos de nodos: <br>
<br>Nodo documento (página HTML completa) 
<br>Nodo elemento 
<br>Nodo atributo (en las etiquetas de inicio de HTML) 
<br>Nodo texto (dentro de los elementos)
<br>Javascript DOM permite consultas en los elementos HTML.<br>const elem = document.getDocumentById(“one” );
<br>Recientemente, se han añadido las consultas de selectores CSS, lo que permite mayor flexibilidad, aunque no se garantiza que todos los navegadores sean compatibles.<br>const first_elem = document.querySelector (“li.one” );
<br><img alt="Pasted image 20241126000303.png" src="includes/pasted-image-20241126000303.png"><br><br>JSON (JavaScript Object Notation)<br>Es un lenguaje de intercambio de datos ligero, basado en texto e independiente del lenguaje: <br>
<br>Define un conjunto de reglas de formato para la representación de datos estructurados.
<br>Derivado de ECMAScript.
<br>Representa los datos como un conjunto de objectos de Javascript.
<br>Popularizado por su uso en APIs y servicios web.
<br>JSON es un estándar IETF (última actualización: dic. 2017).<br>{ "private": "true",
 "from": { 
    “id”: "alba@miempresa.es", 
    “text”: “Alba Lopez” 
  }, 
  "to": { 
      “id”: "Roberto@miempresa.es", 
      “text”: “Roberto Manuel” 
  }, 
  "subject": "Mañana en mi fiesta de cumpleaños!", 
  “content": { 
     "language": “spanish", 
     "text": "Oye, Roberto, no te olvides de llamarme para organizar la fiesta."    } 
}
<br>YAML (Yet Another MarkUp Language) [2006]<br>Es un lenguaje de serialización –legible por el humano– utilizado en general para ficheros de configuración: <br>
<br>Es un lenguaje orientado a líneas (line-oriented) que ofrece puramente una representación de datos (no necesariamente estructurados) 
<br>YAML no ofrece comandos (no es ejecutable) 
<br>YAML no es un lenguaje de etiquetas (como XML) 
<br>Utiliza una sintaxis mínima diferenciada de XML, más cercana al estilo de formato de Python.
<br>Serializado en ficheros con extensión .yaml.
]]></description><link>5.-lenguajes-para-la-web.html</link><guid isPermaLink="false">5. Lenguajes para la Web.md</guid><pubDate>Mon, 25 Nov 2024 23:17:58 GMT</pubDate><enclosure url="includes/pasted-image-20241125201248.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;includes/pasted-image-20241125201248.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[index]]></title><description><![CDATA[ 
 <br><br>
<br><a data-href="2. Fundamentos de Internet" href="2.-fundamentos-de-internet.html" class="internal-link" target="_self" rel="noopener nofollow">2. Fundamentos de Internet</a>
<br><a data-href="3. Tipología de la Web" href="3.-tipología-de-la-web.html" class="internal-link" target="_self" rel="noopener nofollow">3. Tipología de la Web</a>
<br><a data-href="4. Marcos Tecnológicos" href="4.-marcos-tecnológicos.html" class="internal-link" target="_self" rel="noopener nofollow">4. Marcos Tecnológicos</a>
<br><a data-href="5. Lenguajes para la Web" href="5.-lenguajes-para-la-web.html" class="internal-link" target="_self" rel="noopener nofollow">5. Lenguajes para la Web</a>
]]></description><link>index.html</link><guid isPermaLink="false">index.md</guid><pubDate>Mon, 25 Nov 2024 19:00:49 GMT</pubDate></item></channel></rss>